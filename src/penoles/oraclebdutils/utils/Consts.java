package penoles.oraclebdutils.utils;

/**
 *
 * @author joseluischavez
 */
public class Consts {

    public static final String RESOURCE_PARENT = "package resources;\n"
            + "\n"
            + "import com.google.gson.Gson;\n"
            + "import java.util.List;\n"
            + "import javax.ws.rs.Consumes;\n"
            + "import javax.ws.rs.DELETE;\n"
            + "import javax.ws.rs.POST;\n"
            + "import javax.ws.rs.PUT;\n"
            + "import javax.ws.rs.Path;\n"
            + "import javax.ws.rs.Produces;\n"
            + "import javax.ws.rs.QueryParam;\n"
            + "import javax.ws.rs.core.MediaType;\n"
            + "import javax.ws.rs.core.Response;\n"
            + "import penoles.oraclebdutils.abstractclasses.ResponseObject;\n"
            + "import penoles.oraclebdutils.abstractclasses.ReturnObject;\n"
            + "import penoles.oraclebdutils.database.controller.DatabaseController;\n"
            + "import security.SecurityUtils;\n"
            + "\n"
            + "/**\n"
            + " *\n"
            + " * @author Class generated by JDBCUtils.\n"
            + " * @param <E>\n"
            + " */\n"
            + "public class ResourceParent<E> {\n"
            + "\n"
            + "    @POST\n"
            + "    @Path(\"get\")\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response get(E entity,\n"
            + "            @QueryParam(\"order\") String order,\n"
            + "            @QueryParam(\"page\") Integer page,\n"
            + "            @QueryParam(\"page-length\") Integer page_length,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "            ResponseObject<List<Object>, Exception> responseObject = DatabaseController.select(entity, order, page, page_length);\n"
            + "            List<Object> list = (List<Object>) responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, list);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    @POST\n"
            + "    @Path(\"length\")\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response lenght(E entity,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "            ResponseObject<Integer, Exception> responseObject = DatabaseController.getLength(entity);\n"
            + "            Integer length = (Integer) responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, length);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    @POST\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response insert(E object,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<List<Object>, Exception> responseObject = DatabaseController.insert(object);\n"
            + "            Exception exception = responseObject.getException();\n"
            + "            List<Object> list = (List<Object>) responseObject.getResponse();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, list);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    @POST\n"
            + "    @Path(\"batch\")\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response insert(E[] objects,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<Object[], Exception> responseObject = DatabaseController.insert(objects);\n"
            + "            Object[] result = (Object[]) responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, result);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "\n"
            + "    }\n"
            + "\n"
            + "    @PUT\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response update(E object,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<Object, Exception> responseObject = DatabaseController.update(object);\n"
            + "            Object result = responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                Object[] array = {result};\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, array);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    @PUT\n"
            + "    @Path(\"batch\")\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response update(E[] objects,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<Object[], Exception> responseObject = DatabaseController.update(objects);\n"
            + "            Object[] result = (Object[]) responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, result);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "\n"
            + "    }\n"
            + "\n"
            + "    @DELETE\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response delete(E object,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<Object, Exception> responseObject = DatabaseController.delete(object);\n"
            + "            Object result = responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "                Object[] objects = {result};\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, objects);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    @DELETE\n"
            + "    @Path(\"batch\")\n"
            + "    @Consumes(MediaType.APPLICATION_JSON)\n"
            + "    @Produces(MediaType.APPLICATION_JSON)\n"
            + "    public Response delete(E[] objects,\n"
            + "            @QueryParam(\"user\") String user,\n"
            + "            @QueryParam(\"pass\") String pass,\n"
            + "            @QueryParam(\"token\") String token) {\n"
            + "\n"
            + "        String securityToken = SecurityUtils.validateSecurity(user, pass);\n"
            + "        securityToken = securityToken == null ? SecurityUtils.validateSecurity(token) : securityToken;\n"
            + "        if (securityToken != null) {\n"
            + "\n"
            + "            ResponseObject<Object[], Exception> responseObject = DatabaseController.delete(objects);\n"
            + "            Object[] result = (Object[]) responseObject.getResponse();\n"
            + "            Exception exception = responseObject.getException();\n"
            + "\n"
            + "            if (exception != null) {\n"
            + "                return Response.serverError().entity(new Gson().toJson(exception)).build();\n"
            + "            } else {\n"
            + "\n"
            + "                ReturnObject returnObject = new ReturnObject(securityToken, result);\n"
            + "                return Response.ok().entity(new Gson().toJson(returnObject)).build();\n"
            + "            }\n"
            + "\n"
            + "        } else {\n"
            + "            return Response.status(Response.Status.FORBIDDEN).build();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "}\n"
            + "";

    public static final String SECURITY_UTILS = "package security;\n"
            + "\n"
            + "/**\n"
            + " *\n"
            + " * @author Class created By JDBCUtils\n"
            + " */\n"
            + "public class SecurityUtils {\n"
            + "\n"
            + "    public static String validateSecurity(String token) {\n"
            + "        String result = \"\";\n"
            + "        //Here´s where your security validation must be coded.\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "    public static String validateSecurity(String user, String pass) {\n"
            + "        String result = \"\";\n"
            + "        //String´s where your security validation must be coded.\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "}";

}
